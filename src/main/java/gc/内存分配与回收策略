* *_对象优先在Eden分配_*(当触发分配担保机制会提前转移到老年代去)
- 分配担保机制：HotSpot虚拟机默认Eden和Survivor的大小比例是8∶1,也即每次新生代中可用内存空间为整个新
生代容量的90%(Eden的80%加上一个Survivor的10%),只有一个Survivor空间,即10%的新生代是会
被“浪费”的。当然,98%的对象可被回收仅仅是“普通场景”下测得的数据,任何人都没有办法百分百
保证每次回收都只有不多于10%的对象存活,因此Appel式回收还有一个充当罕见情况的“逃生门”的安
全设计,当Survivor空间不足以容纳一次M inor GC之后存活的对象时,就需要依赖其他内存区域(实
际上大多就是老年代)进行分配担保(Handle Promotion)

* 大对象直接进入老年代(-XX:PretenureSizeThreshold
参数,指定大于该设置值的对象直接在老年代分配)

* 长期存活的对象将进入老年代(-XX:MaxTenuringThreshold 设置最大分代年龄。分代年龄在对象头中存储)

* 动态对象年龄判定
- 在Survivor空间中相同年龄所有对象大小的总和大于
Survivor空间的一半,年龄大于或等于该年龄的对象就可以直接进入老年代,无须等到-XX:
MaxTenuringThreshold中要求的年龄。

* 空间分配担保(- XX:HandlePromotionFailure参数的设置值是否允许担保失败(Handle Promotion Failure))
- 在发生M inor GC之前,虚拟机必须先检查老年代最大可用的连续空间是否大于新生代所有对象总
空间,如果这个条件成立,那这一次M inor GC可以确保是安全的。如果不成立,则虚拟机会先查看-
XX:HandlePromotionFailure参数的设置值是否允许担保失败(Handle Promotion Failure);如果允
许,那会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小,如果大
于,将尝试进行一次M inor GC,尽管这次M inor GC是有风险的;如果小于,或者-XX:
HandlePromotionFailure设置不允许冒险,那这时就要改为进行一次Full GC。
- 新生代使用复制收集算法,但为了内存利用率,
只使用其中一个Survivor空间来作为轮换备份,因此当出现大量对象在M inor GC后仍然存活的情况
——最极端的情况就是内存回收后新生代中所有对象都存活,需要老年代进行分配担保,把Survivor无
法容纳的对象直接送入老年代.老年代要进行这样的担保,前提是老年代
本身还有容纳这些对象的剩余空间,但一共有多少对象会在这次回收中活下来在实际完成内存回收之
前是无法明确知道的,所以只能取之前每一次回收晋升到老年代对象容量的平均大小作为经验值,与
老年代的剩余空间进行比较,决定是否进行Full GC来让老年代腾出更多空间。